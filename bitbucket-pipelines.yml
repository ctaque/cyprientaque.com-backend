# This is an example Starter pipeline configuration
# Use a skeleton to build, test and deploy using manual and parallel steps
# -----
# You can specify a custom docker image from Docker Hub as your build environment.
# rust buster 2022-03-19
#
pipelines:
  branches:
    master:
      - step:
          name: 'Compile frontend'
          image:
            name: node:11.15.0
          script:
            - echo "Installing dependencies"; npm --prefix ./static/react/ ci
            - echo "Compiling frontend...";REACT_APP_JWT_SECRET=$JWT_SECRET npm --prefix ./static/react/ run build
          artifacts:
            - static/templates/**

      - step:
          name: 'Compile backend...'
          size: 2x
          image:
            name: rust:1.67
          script:
            - echo "Compiling rust backend..."; cargo build  --release
          artifacts:
            - target/release/ctprods
          caches:
            - cargo
            - rust-target

      - step:
          name: 'Create Docker image...'
          size: 2x
          image:
            name: rust@sha256:80f2e747f4d6b572e79b845df87b47dd9102f236113efd8921a115f4515b7df1
          script:
            - docker login --username=ctaque --password=$DOCKER_PASS
            - docker build -t ctaque/ctprods:latest .
            - docker push ctaque/ctprods:latest
          services:
            - docker

      - step:
          name: 'Deployment to Production'
          size: 2x
          deployment: production
          script:
            - pipe: atlassian/ssh-run:0.3.0
              variables:
                SSH_USER: $PADOUK_USER
                SERVER: $PADOUK_IP
                COMMAND: 'nomad job restart ctprods'
                MODE: 'command'
                ENV_VARS: >-
                    NOMAD_TOKEN=${NOMAD_TOKEN}

definitions:
  caches:
    cargo: /usr/local/cargo
    rust-target: $BITBUCKET_CLONE_DIR/target
  services:
    docker:
      memory: 4096
